// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	pcapv1 "github.com/alexanderConstantinescu/kubectl-pcap/api/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePCAPs implements PCAPInterface
type FakePCAPs struct {
	Fake *FakePcapV1
}

var pcapsResource = schema.GroupVersionResource{Group: "pcap.k8s.io", Version: "v1", Resource: "pcaps"}

var pcapsKind = schema.GroupVersionKind{Group: "pcap.k8s.io", Version: "v1", Kind: "PCAP"}

// Get takes name of the pCAP, and returns the corresponding pCAP object, and an error if there is any.
func (c *FakePCAPs) Get(ctx context.Context, name string, options v1.GetOptions) (result *pcapv1.PCAP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(pcapsResource, name), &pcapv1.PCAP{})
	if obj == nil {
		return nil, err
	}
	return obj.(*pcapv1.PCAP), err
}

// List takes label and field selectors, and returns the list of PCAPs that match those selectors.
func (c *FakePCAPs) List(ctx context.Context, opts v1.ListOptions) (result *pcapv1.PCAPList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(pcapsResource, pcapsKind, opts), &pcapv1.PCAPList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &pcapv1.PCAPList{ListMeta: obj.(*pcapv1.PCAPList).ListMeta}
	for _, item := range obj.(*pcapv1.PCAPList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested pCAPs.
func (c *FakePCAPs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(pcapsResource, opts))
}

// Create takes the representation of a pCAP and creates it.  Returns the server's representation of the pCAP, and an error, if there is any.
func (c *FakePCAPs) Create(ctx context.Context, pCAP *pcapv1.PCAP, opts v1.CreateOptions) (result *pcapv1.PCAP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(pcapsResource, pCAP), &pcapv1.PCAP{})
	if obj == nil {
		return nil, err
	}
	return obj.(*pcapv1.PCAP), err
}

// Update takes the representation of a pCAP and updates it. Returns the server's representation of the pCAP, and an error, if there is any.
func (c *FakePCAPs) Update(ctx context.Context, pCAP *pcapv1.PCAP, opts v1.UpdateOptions) (result *pcapv1.PCAP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(pcapsResource, pCAP), &pcapv1.PCAP{})
	if obj == nil {
		return nil, err
	}
	return obj.(*pcapv1.PCAP), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePCAPs) UpdateStatus(ctx context.Context, pCAP *pcapv1.PCAP, opts v1.UpdateOptions) (*pcapv1.PCAP, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(pcapsResource, "status", pCAP), &pcapv1.PCAP{})
	if obj == nil {
		return nil, err
	}
	return obj.(*pcapv1.PCAP), err
}

// Delete takes name of the pCAP and deletes it. Returns an error if one occurs.
func (c *FakePCAPs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(pcapsResource, name), &pcapv1.PCAP{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePCAPs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(pcapsResource, listOpts)

	_, err := c.Fake.Invokes(action, &pcapv1.PCAPList{})
	return err
}

// Patch applies the patch and returns the patched pCAP.
func (c *FakePCAPs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *pcapv1.PCAP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(pcapsResource, name, pt, data, subresources...), &pcapv1.PCAP{})
	if obj == nil {
		return nil, err
	}
	return obj.(*pcapv1.PCAP), err
}

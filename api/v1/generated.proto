
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.openshift.api.pcap.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// PCAP does layer 4 packet tracing across a Kubernetes cluster. The CR can be
// created by a user with required cluster permissions and allows for a
// programmable interface to debugging a Kubernetes networking problem. This CRD
// is mainly intended to be used by applications/user experiencing consistent
// connection failures to their endpoint. Applications can create this CR
// automatically whenever they experience a failed connection attempt. This CRD
// is not intended for sporadic connection failures since those require much
// more advanced techniques, and usually capturing more packets than what this
// CRD aims at doing. The goal of this CRD is to ease a network engineers life
// and reduce the amount of data that needs to analyzed when debugging a network
// problem. This CRD focuses on atomic issues and hence is very poor at
// analyzing broader scope problems. The CRD allows for a source resource and
// destination fields to be specified. Note that most fields in this CR require
// that you DO NOT specify IP. Kubernetes objects are not keyed by IP, and this
// CRD attempts at aligning it with the Kubernetes paradigm rather than the
// networking one.
//
// Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:object:root=true
// +kubebuilder:resource:path=pcaps,scope=Cluster
// +openshift:compatibility-gen:level=1
message PCAP {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec is the definition of the desired packet capture.
  // +kubebuilder:validation:Required
  // +required
  optional PCAPSpec spec = 2;

  // status is the observed trace of the desired packet capture. Read-only.
  // +kubebuilder:validation:Optional
  // +optional
  optional PCAPStatus status = 3;
}

// PCAPDestination defines a destination for the network connection
// +k8s:openapi-gen=true
message PCAPDestination {
  // destination is a freetext valued destination used for the
  // connection. This can be a DNS name or an IP address. In the
  // case that a DNS name is specified: packet traces including the DNS
  // resolution will be included in the capture.
  // +kubebuilder:validation:Required
  // +required
  optional string destination = 1;

  // port is the destination port specified for connection. It is specified as
  // optional the purpose of ICMP packets
  // +kubebuilder:validation:Optional
  // +optional
  optional int32 port = 2;

  // protocol is the protocol specified for the connection. It is specified as
  // optional the purpose of ICMP packets
  // +kubebuilder:validation:Optional
  // +optional
  optional string protocol = 3;
}

// Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +resource:path=pcap
// +openshift:compatibility-gen:level=1
// PCAPList is the list of PCAP.
message PCAPList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // List of PCAP.
  repeated PCAP items = 2;
}

// PCAPSource defines a source for the network connection
// +k8s:openapi-gen=true
message PCAPSource {
  // node is the node name, as specified by the Kubernetes field: node.metadata.name
  // +kubebuilder:validation:Optional
  // +optional
  optional string node = 1;

  // pod is the pod name, as specified by the Kubernetes field: pod.metadata.name
  // +kubebuilder:validation:Optional
  // +optional
  optional string pod = 2;

  // namespace is the pod's namespace, as specified by the Kubernetes field: namespace.metadata.name
  // +kubebuilder:validation:Optional
  // +optional
  optional string namespace = 3;
}

// PCAPSpec defines a source and destination for the network connection
// +k8s:openapi-gen=true
message PCAPSpec {
  // id is defined by the initiator of the injected network connection and
  // signals to all agents which ID they should filter on.
  // +kubebuilder:validation:Required
  // +required
  optional string id = 1;

  // source is the source Kubernetes resource initiating a network connection.
  // Packets will be injected into this network namespace.
  // +kubebuilder:validation:Required
  // +required
  optional PCAPSource source = 2;

  // destination is the destination endpoint targeted by the network connection
  // +kubebuilder:validation:Required
  // +required
  optional PCAPDestination destination = 3;
}

// PCAPStatus specifies the packet traces found across the cluster for the
// connection, together with a global condition status indicating PCAP state to
// all agents
// +k8s:openapi-gen=true
message PCAPStatus {
  // traces contains all traces across the cluster of the packets related to
  // the connection
  // +kubebuilder:validation:Optional
  // +optional
  repeated Trace traces = 1;

  // conditions coordinates state and action for all agents on the cluster.
  // +kubebuilder:validation:Required
  // +required
  repeated k8s.io.apimachinery.pkg.apis.meta.v1.Condition conditions = 2;
}

// +k8s:openapi-gen=true
message Trace {
  // timestamp is the packet trace timestamp as returned by libpcap
  // +kubebuilder:validation:Required
  // +required
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time timestamp = 1;

  // node is the node name the packet trace was captured on, as specified by
  // the Kubernetes field: node.metadata.name
  // +kubebuilder:validation:Required
  // +required
  optional string node = 2;

  // pod is the pod name associated with the source or destination network
  // interface. Note: this is only set in case the L2 packet trace references
  // an non-host networked interface.
  // +kubebuilder:validation:Optional +optional
  optional string pod = 3;

  // srciface is the source network interace associated with the L2 packet capture
  // +kubebuilder:validation:Required
  // +required
  optional string srciface = 4;

  // dstiface is the destination network interace associated with the L2 packet capture
  // +kubebuilder:validation:Required
  // +required
  optional string dstiface = 5;

  // srcip is the source IP of the layer 3 packet trace
  // +kubebuilder:validation:Required
  // +required
  optional string srcip = 6;

  // dstip is the destination IP of the layer 3 packet trace
  // +kubebuilder:validation:Required
  // +required
  optional string dstip = 7;

  // srcport is the source port of the layer 4 packet trace
  // +kubebuilder:validation:Required
  // +required
  optional int32 srcport = 8;

  // dstport is the destination port of the layer 4 packet trace
  // +kubebuilder:validation:Required
  // +required
  optional int32 dstport = 9;
}

